#pragma once
#include <string>
#include <queue>
#include <mutex>
#include <memory>

#include "Commands.h"

class DrawingCommand {
};

namespace circleAssignment {

class CommandQueue {
protected:
	std::mutex queueMutex;
	std::queue<std::shared_ptr<DrawingCommand>> commandQueue;

public:
	void push(std::shared_ptr<DrawingCommand> command) {
		std::lock_guard<std::mutex> lockGuard(queueMutex);

		commandQueue.push(command);
	}

	std::shared_ptr<DrawingCommand> pop() {
		std::lock_guard<std::mutex> lockGuard(queueMutex);

		std::shared_ptr<DrawingCommand> returnValue = commandQueue.front();
		commandQueue.pop();

		return returnValue;
	}
};

}
